using System.IO;
using System.Linq;
using System.Text;
using ICalendar.Calendar;
using ICalendar.CalendarComponents;
using ICalendar.Utils;
using TreeForXml;
using Xunit;
using ICalendar.ComponentProperties;
using ICalendar.GeneralInterfaces;

namespace ICalendarTest
{
    /// <summary>
    /// This class contains test for the CalendarComponents.
    /// </summary>
    public class CalendarComponentTests
    {
        /// <summary>
        /// Testing the creation of VFREEBUSY components.
        /// </summary>
        [Fact]
        public void UnitTest1()
        {
            var calString = @"BEGIN:VCALENDAR
BEGIN:VFREEBUSY
FREEBUSY:19980314T233000Z/19980315T003000Z
FREEBUSY:19980316T153000Z/19980316T163000Z
FREEBUSY:19980318T030000Z/19980318T040000Z
URL:http://www.example.com/calendar/busytime/jsmith.ifb
END:VFREEBUSY
END:VCALENDAR
";
            VCalendar calendar = VCalendar.Parse(calString);
            var calendarString = calendar.ToString();
            UnicodeEncoding uniencoding = new UnicodeEncoding();
            UTF8Encoding utf8Encoding = new UTF8Encoding();
            var toWrite = utf8Encoding.GetBytes(calendarString);
            File.Delete("output1.ics");
            using (var writer = File.OpenWrite("output1.ics"))
            {
                writer.Seek(0, SeekOrigin.End);
                writer.Write(toWrite, 0, toWrite.Length);
            }
            using (var reader = File.OpenText("output1.ics"))
            {
                var writedCal = reader.ReadToEnd();
                var writedCalLines = Parser.CalendarReader(writedCal);
                var expectedLines = Parser.CalendarReader(calString);
                Assert.Equal(expectedLines.Length, writedCalLines.Length);
                for (int i = 0; i < writedCalLines.Length; i++)
                {
                    Assert.Contains(expectedLines[i], writedCalLines);
                }
            }
            Assert.NotNull(calendarString);
        }

       

        /// <summary>
        /// Testing the toString with some comp and properties
        /// </summary>
        [Fact]
        public void UnitTest3()
        {
            var calStr = @"BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp.//CalDAV Client//EN
BEGIN:VTIMEZONE
LAST-MODIFIED:20040110T032845Z
TZID:US/Eastern
BEGIN:DAYLIGHT
DTSTART:20000404T020000
RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=4
TZNAME:EDT
TZOFFSETFROM:-0500
TZOFFSETTO:-0400
END:DAYLIGHT
BEGIN:STANDARD
DTSTART:20001026T020000
RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10
TZNAME:EST
TZOFFSETFROM:-0400
TZOFFSETTO:-0500
END:STANDARD
END:VTIMEZONE
BEGIN:VEVENT
ATTENDEE;PARTSTAT=ACCEPTED;ROLE=CHAIR:mailto:cyrus@example.com
ATTENDEE;PARTSTAT=NEEDS-ACTION:mailto:lisa@example.com
DTSTAMP:20060206T001220Z
DTSTART;TZID=US/Eastern:20060104T100000
DURATION:PT1H
RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10
LAST-MODIFIED:20060206T001330Z
ORGANIZER:mailto:cyrus@example.com
SEQUENCE:1
STATUS:TENTATIVE
SUMMARY:Event #3
UID:DC6C50A017428C5216A2F1CD@example.com
X-ABC-GUID:E1CX5Dr-0007ym-Hz@example.com
END:VEVENT
END:VCALENDAR";

            var result = VCalendar.Parse(calStr);

            var xmlStr = @"
<C:calendar-data xmlns:C=""urn:ietf:params:xml:ns:caldav"">
<C:comp name=""VCALENDAR"">
<C:prop name=""VERSION""/>
<C:comp name=""VEVENT"">
<C:prop name=""SUMMARY""/>
<C:prop name=""UID""/>
<C:prop name=""DTSTART""/>
<C:prop name=""DTEND""/>
<C:prop name=""DURATION""/>
<C:prop name=""RRULE""/>
<C:prop name=""ATTENDEE""/>
<C:prop name=""EXRULE""/>
<C:prop name=""EXDATE""/>
<C:prop name=""RECURRENCE-ID""/>
</C:comp>
<C:comp name=""VTIMEZONE""/>
</C:comp>
</C:calendar-data>";

            var calString = result.ToString(XmlTreeStructure.Parse(xmlStr));

        }







        [Fact]
        public void TestVConferenceComponent()
        {
            var vConfString = @"BEGIN:VCALENDAR
            VERSION:2.0
            PRODID:-//Example Corp.//CalDAV Client//EN
            BEGIN:VCONFERENCE
            DTSTAMP:20160206T001220Z
            DTSTART;TZID=US/Eastern:20160104T100000
            DURATION:PT1H30M
            SUMMARY:LP Conference
            UID:DC6C50A017428C5216A2F1CD@example.com
            RRULE:FREQ=WEEKLY;UNTIL=20161224T000000Z
            END:VCONFERENCE
            END:VCALENDAR
            ";
            var vConference = VCalendar.Parse(vConfString);
            var stringVConf = vConference.ToString();
           

            Assert.Equal(vConfString,stringVConf);
        }


        [Fact]
        public void TestNullReferenceOnDurationProp()
        {
            var vCalString = @"BEGIN:VCALENDAR
VERSION:2.0
PRODID:+//IDN bitfire.at//DAVdroid/1.0.8 ical4android ical4j/2.x
BEGIN:VEVENT
DTSTAMP:20160907T213117Z
UID:1d2a9f2f-40d0-4733-b81b-1ea15d79ee21
DTSTART;TZID=America/Havana:20160905T080000
DURATION:PT5700S
RRULE:FREQ=WEEKLY;WKST=SU;COUNT=16;BYDAY=MO
SUMMARY:Programación y algoritmos CF
LOCATION:Aula 8
STATUS:CONFIRMED
END:VEVENT
BEGIN:VTIMEZONE
TZID:America/Havana
TZURL:http://tzurl.org/zoneinfo/America/Havana
X-LIC-LOCATION:America/Havana
BEGIN:STANDARD
TZOFFSETFROM:-0400
TZOFFSETTO:-0500
TZNAME:CST
DTSTART:20121104T010000
RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU
END:STANDARD
BEGIN:DAYLIGHT
TZOFFSETFROM:-0500
TZOFFSETTO:-0400
TZNAME:CDT
DTSTART:20130310T000000
RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU
END:DAYLIGHT
BEGIN:STANDARD
TZOFFSETFROM:-052928
TZOFFSETTO:-052936
TZNAME:HMT
DTSTART:18900101T000000
RDATE:18900101T000000
END:STANDARD
BEGIN:STANDARD
TZOFFSETFROM:-052936
TZOFFSETTO:-0500
TZNAME:CST
DTSTART:19250719T120000
RDATE:19250719T120000
END:STANDARD
BEGIN:DAYLIGHT
TZOFFSETFROM:-0500
TZOFFSETTO:-0400
TZNAME:CDT
DTSTART:19280610T010000
RDATE:19280610T010000
RDATE:19400602T010000
RDATE:19410601T010000
RDATE:19420607T010000
RDATE:19450603T010000
RDATE:19460602T010000
RDATE:19650601T010000
RDATE:19660529T010000
RDATE:19670408T010000
RDATE:19680414T010000
RDATE:19690427T010000
RDATE:19700426T000000
RDATE:19710425T000000
RDATE:19720430T000000
RDATE:19730429T000000
RDATE:19740428T000000
RDATE:19750427T000000
RDATE:19760425T000000
RDATE:19770424T000000
RDATE:19780507T000000
RDATE:19790318T000000
RDATE:19800316T000000
RDATE:19810510T000000
RDATE:19820509T000000
RDATE:19830508T000000
RDATE:19840506T000000
RDATE:19850505T000000
RDATE:19860316T000000
RDATE:19870315T000000
RDATE:19880320T000000
RDATE:19890319T000000
RDATE:19900401T000000
RDATE:19910407T000000
RDATE:19920405T000000
RDATE:19930404T000000
RDATE:19940403T000000
RDATE:19950402T000000
RDATE:19960407T000000
RDATE:19970406T000000
RDATE:19980329T000000
RDATE:19990328T000000
RDATE:20000402T000000
RDATE:20010401T000000
RDATE:20020407T000000
RDATE:20030406T000000
RDATE:20040328T000000
RDATE:20070311T000000
RDATE:20080316T000000
RDATE:20090308T000000
RDATE:20100314T000000
RDATE:20110320T000000
RDATE:20120401T000000
END:DAYLIGHT
BEGIN:STANDARD
TZOFFSETFROM:-0400
TZOFFSETTO:-0500
TZNAME:CST
DTSTART:19281010T000000
RDATE:19281010T000000
RDATE:19400901T000000
RDATE:19410907T000000
RDATE:19420906T000000
RDATE:19450902T000000
RDATE:19460901T000000
RDATE:19650930T000000
RDATE:19661002T000000
RDATE:19670910T000000
RDATE:19680908T000000
RDATE:19691026T000000
RDATE:19701025T000000
RDATE:19711031T000000
RDATE:19721008T000000
RDATE:19731008T000000
RDATE:19741008T000000
RDATE:19751026T000000
RDATE:19761031T000000
RDATE:19771030T000000
RDATE:19781008T000000
RDATE:19791014T000000
RDATE:19801012T000000
RDATE:19811011T000000
RDATE:19821010T000000
RDATE:19831009T000000
RDATE:19841014T000000
RDATE:19851013T000000
RDATE:19861012T000000
RDATE:19871011T000000
RDATE:19881009T000000
RDATE:19891008T000000
RDATE:19901014T000000
RDATE:19911013T010000
RDATE:19921011T010000
RDATE:19931010T010000
RDATE:19941009T010000
RDATE:19951008T010000
RDATE:19961006T010000
RDATE:19971012T010000
RDATE:19981025T010000
RDATE:19991031T010000
RDATE:20001029T010000
RDATE:20011028T010000
RDATE:20021027T010000
RDATE:20031026T010000
RDATE:20061029T010000
RDATE:20071028T010000
RDATE:20081026T010000
RDATE:20091025T010000
RDATE:20101031T010000
RDATE:20111113T010000
END:STANDARD
END:VTIMEZONE
END:VCALENDAR
";
            var vCal = VCalendar.Parse(vCalString);

            var stringFromVCal = vCal.ToString();

            Assert.NotNull(stringFromVCal);
        }
        










    }
}